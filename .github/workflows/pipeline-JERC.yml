name: Backend Pipeline

on:
  pull_request:
    branches: ['*']
  push:
    branches:
      - '*'
      - '!main'

jobs:
  test-build-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install backend dependencies
        working-directory: backend
        run: npm ci
      
      - name: Run backend tests
        working-directory: backend
        run: npm test
      
      - name: Build backend
        working-directory: backend
        run: npm run build
      
      - name: Deploy to EC2
        if: github.event_name == 'push' && github.ref != 'refs/heads/main'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_INSTANCE: ${{ secrets.EC2_INSTANCE }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          # Configurar clave SSH
          mkdir -p ~/.ssh
          echo "$EC2_SSH_KEY" > ~/.ssh/ec2.key
          chmod 600 ~/.ssh/ec2.key
          
          # Configurar known_hosts para evitar confirmación manual
          ssh-keyscan -H $EC2_INSTANCE >> ~/.ssh/known_hosts
          
          # Crear directorio de despliegue temporal
          mkdir -p deploy
          
          # Copiar archivos necesarios para el despliegue
          cp -r backend/dist deploy/
          cp backend/package.json deploy/
          cp backend/package-lock.json deploy/
          
          # Comprimir para transferencia
          tar -czf deploy.tar.gz -C deploy .
          
          # Transferir archivos a la instancia EC2
          scp -i ~/.ssh/ec2.key deploy.tar.gz $EC2_USER@$EC2_INSTANCE:/home/$EC2_USER/
          
          # Ejecutar comandos de despliegue en el servidor
          ssh -i ~/.ssh/ec2.key $EC2_USER@$EC2_INSTANCE << 'EOF'
            # Crear directorio temporal
            mkdir -p ~/temp_deploy
            
            # Descomprimir en directorio temporal
            tar -xzf deploy.tar.gz -C ~/temp_deploy
            
            # Detener la aplicación actual si está en ejecución
            pm2 stop backend || true
            
            # Actualizar archivos de la aplicación
            rm -rf ~/backend/dist
            mkdir -p ~/backend
            cp -r ~/temp_deploy/* ~/backend/
            
            # Instalar dependencias
            cd ~/backend
            npm ci --production
            
            # Reiniciar la aplicación con PM2
            pm2 start dist/index.js --name backend
            
            # Limpiar archivos temporales
            rm -rf ~/temp_deploy
            rm ~/deploy.tar.gz
          EOF 